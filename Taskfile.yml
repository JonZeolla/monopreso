---
# https://taskfile.dev

version: '3'

set:
  - nounset
  - errexit
  - pipefail

silent: true

vars:
  PRESENTATION:
    sh: |
      rel="${USER_WORKING_DIR#"{{.ROOT_DIR}}"}"
      rel="${rel#/}"        # drop any leading slash
      rel="${rel#*/}"       # drop "presentations/" or "modules/"
      printf '%s\n' "${rel%%/*}"   # keep up to next slash ‚Üí foo/bar

tasks:
  lock:
    desc: Update uv.lock if pyproject.toml has changed
    internal: true
    sources:
      - pyproject.toml
    generates:
      - uv.lock
    cmds:
      - uv lock

  init-uv:
    desc: Initializes uv if uv.lock changes
    internal: true
    sources:
      - uv.lock
    cmds:
      - uv sync

  init-submodules:
    desc: >
      Initializes git submodules; paved road projects include the Seiso goat üêê
      for its shared configs, etc.
    internal: true
    status:
      # Only update submodules if you are in a git repository; quote to avoid yaml intrepretering the ! as a node tag
      # https://yaml.org/spec/1.2.2/#691-node-tags
      - '! test -d .git'
    cmds:
      - git submodule update --init --recursive

  init:
    desc: Initialize the repo for local use; intended to be run after git clone
    deps: [lock]
    cmds:
      - task: init-uv
      - task: init-submodules

  lint:
    desc: Run the linter(s)
    cmds:
      - uv run pre-commit run --all-files

  validate:
    desc: Validate the pre-commit config and hooks files
    cmds:
      - uv run pre-commit validate-config .pre-commit-config.yaml

  update:
    desc: Update the project dependencies, and other misc components
    cmds:
      - uv lock
      - pre-commit autoupdate --bleeding-edge --freeze --jobs 4
      - for repo in $(find ./modules/iac_security/demo -type d -mindepth 1 -maxdepth 1); do pushd "${repo}"; git pull origin main; popd; done

  start:
    desc: Start the presentation based on the directory the user is currently in
    vars:
      PRESENTATION:
        sh: |
          if [ -n "{{.PRESENTATION}}" ] && [ "{{.PRESENTATION}}" != "<no value>" ]; then
            echo "{{.PRESENTATION}}"
          else
            rel="${USER_WORKING_DIR#"{{.ROOT_DIR}}"}"
            rel="${rel#/}"        # drop any leading slash
            rel="${rel#*/}"       # drop "presentations/" or "modules/"
            printf '%s\n' "${rel%%/*}"   # keep up to next slash ‚Üí foo/bar
          fi
    cmds:
      - '{{.ROOT_DIR}}/start.sh --preso={{.PRESENTATION}} {{.CLI_ARGS}}'

  generate-pdfs:
    desc: Generate all of the PDFs
    vars:
      PRESENTATIONS:
        sh: ./start.sh --list
    cmds:
      - for: { var: PRESENTATIONS }
        task: generate-pdf
        vars:
          PRESENTATION: '{{.ITEM}}'

  generate-pdf:
    desc: Generate one PDF
    requires:
      vars:
        - PRESENTATION
    vars:
      OUTPUT_PDF: '{{.USER_WORKING_DIR}}/{{.PRESENTATION}}.pdf'
    cmds:
      - defer: { task: stop }
      - task: start
        vars:
          PRESENTATION: '{{.PRESENTATION}}'
          CLI_ARGS: --no-open --no-cleanup
      - /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --headless --print-to-pdf="{{.OUTPUT_PDF}}" 'http://localhost:8000/?print-pdf'

  cleanup-pdfs:
    desc: Cleanup the generated PDFs
    cmds:
      - rm -f *.pdf

  stop:
    desc: Shut down any running containers
    cmds:
      - if [[ -r .container_id ]]; then docker kill "$(cat .container_id)" && rm -f .container_id; fi

  clean:
    desc: Clean up build artifacts, cache files/directories, temp files, etc.
    cmds:
      - mv -f reveal.js/index.html.bkp reveal.js/index.html 2>/dev/null || true
      - rm -f modules/current.html
              reveal.js/modules 2>/dev/null || true
      - rm -f reveal.js/dist/theme/fonts/bitter
              reveal.js/dist/theme/fonts/rock-salt
              reveal.js/dist/theme/custom.css
              reveal.js/css/theme/source/custom.scss
              reveal.js/dist/theme/seiso.css
              reveal.js/css/theme/source/seiso.scss
              reveal.js/modules
              reveal.js/presentations 2>/dev/null || true
      - rm -rf modules/policy_as_code/demo/TODO
               modules/policy_as_code/demo/cosign*
               modules/policy_as_code/demo/Dockerfile 2>/dev/null || true
      - rm -rf presentations/2023-09-TechFest/demo/TODO
               presentations/2023-09-TechFest/demo/cosign*
               presentations/2023-09-TechFest/demo/Dockerfile 2>/dev/null || true
      - rm -rf presentations/2025-07-BSides-PGH/demo/bsidespgh25 2>/dev/null || true
      - cd reveal.js && git restore package-lock.json
      - find {{.ROOT_DIR}} -type d -name '*.egg-info' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name 'coverage-reports' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name '.coverage' -delete
      - find {{.ROOT_DIR}} -type d -name 'htmlcov' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name 'build' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '__pycache__' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.mypy_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type d -name '.pytest_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name '*.pyc' -delete
      - find {{.ROOT_DIR}} -type f -name '*.whl' -delete
      - find {{.ROOT_DIR}} -type d -name '.ruff_cache' -exec rm -rf {} +
      - find {{.ROOT_DIR}} -type f -name '.DS_Store' -delete
      - find {{.ROOT_DIR}} -type f -name '.Thumbs.db' -delete
      - find {{.ROOT_DIR}} -type d -name '.task' -exec rm -rf {} +
      - '{{if eq .CLI_ARGS "all"}}echo "WARNING: Running a clean all in {{.TASKFILE}}"{{end}}'
      - '{{if eq .CLI_ARGS "all"}}find {{.ROOT_DIR}} -type d -name ".venv" -exec rm -rf {} +{{end}}'
